#!/usr/bin/env node

/**
 * Module dependencies.
 */

//var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const config = require('../config');
const socketIo = require('socket.io')

var app = require('../app');

/**
 * Get port from environment and store in Express.
 */

//Edit the NODEPORT variable in the .env file
var port = normalizePort(config.NODEPORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = socketIo(server, {
  cors: {
    origin: process.env.NODE_ENV === "production"
      ? false
      : [`http://localhost:${process.env.NODEPORT}`]
  }
})

io.on('connection', socket => {
  console.log(`User ${socket.id} connected`) //Logging user ID

  // Upon connection - only to user
  socket.emit("message", "Welcome to Chat App!")

  // Upon connection - to all others
  socket.broadcast.emit('message', 
    `User ${socket.id.substring(0,5)} connected`)

  socket.on('message', data => {
    console.log(data)
    io.emit('message', `${socket.id.substring(0,5)}: ${data}`) //Send to all connected clients
  })

  //User disconnects - to others
  socket.on('disconnect', () => {
    socket.broadcast.emit('message', 
      `User ${socket.id.substring(0,5)} disconnected`)
  })

  //Listen for activity
  socket.on('activity', (name) => {
    socket.broadcast.emit('activity', name)
  })
})

console.log(`Server running on ${config.DOMAIN} on port ${config.NODEPORT}`);
console.log(`Using database ${config.DATABASE} from ${config.DB_HOST}`)

module.exports = server